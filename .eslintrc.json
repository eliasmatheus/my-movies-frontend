{
  "root": true,
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.json"],
        "ecmaVersion": 2022,
        "sourceType": "module"
      },
      "plugins": ["etc"],
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:prettier/recommended"
      ],
      "rules": {
        "no-console": "warn",
        "no-restricted-syntax": [
          "error",
          {
            // Vale a regra do "no-console", a não ser para os métodos abaixo (warn, error, info, trace)
            "selector": "CallExpression[callee.object.name='console'][callee.property.name!=/^(warn|error|info|trace)$/]",
            "message": "Unexpected property on console object was called"
          }
        ],
        "no-useless-escape": "off",
        "no-unused-vars": "off",
        "@typescript-eslint/no-non-null-assertion": "warn",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-unused-vars": [
          "warn",
          {
            "argsIgnorePattern": "^_",
            "varsIgnorePattern": "^_",
            "caughtErrorsIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/no-this-alias": "off",
        // NOTA: Desabilitar após resolver outros erros mais urgentes
        "@typescript-eslint/naming-convention": [
          "warn",
          {
            "selector": "variable",
            "format": ["camelCase", "UPPER_CASE", "snake_case"],
            "leadingUnderscore": "allow",
            "trailingUnderscore": "allow"
          }
        ],
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-for-in-array": "warn",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "warn",
        // "@typescript-eslint/no-misused-promises": "warn",
        // "@typescript-eslint/no-unnecessary-type-assertion": "warn",
        // "@typescript-eslint/no-unsafe-argument": "warn",
        // "@typescript-eslint/no-unsafe-assignment": "warn",
        // "@typescript-eslint/no-unsafe-call": "warn",
        // "@typescript-eslint/no-unsafe-member-access": "warn",
        // "@typescript-eslint/no-unsafe-return": "warn",
        "@angular-eslint/component-selector": [
          "error",
          {
            // "prefix": "ngx",
            "style": "kebab-case",
            "type": "element"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            // "prefix": "ngx",
            "style": "camelCase",
            "type": "attribute"
          }
        ],
        "@angular-eslint/no-input-rename": "off",
        "security/detect-object-injection": "off",
        "etc/no-commented-out-code": "warn"
      }
    },
    // NOTE: WE ARE NOT APPLYING PRETTIER IN THIS OVERRIDE, ONLY @ANGULAR-ESLINT/TEMPLATE
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {}
    },
    // NOTE: WE ARE NOT APPLYING @ANGULAR-ESLINT/TEMPLATE IN THIS OVERRIDE, ONLY PRETTIER
    {
      "files": ["*.html"],
      "excludedFiles": ["*inline-template-*.component.html"],
      "extends": ["plugin:prettier/recommended", "plugin:"],
      "rules": {
        // NOTE: WE ARE OVERRIDING THE DEFAULT CONFIG TO ALWAYS SET THE PARSER TO ANGULAR (SEE BELOW)
        "prettier/prettier": ["error", { "parser": "angular" }]
      }
    }
  ]
}
